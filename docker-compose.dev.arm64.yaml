services:
    db:
        image: postgres:17-alpine
        container_name: db
        env_file: .env
        restart: always
        ports:
            - "5432:5432"
        networks:
            - ensys
        volumes:
            - ./data/db:/var/lib/postgresql/data

    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: pgadmin
        env_file: .env
        restart: always
        networks:
            - ensys
        ports:
            - "${PGADMIN_PORT}:80"
        volumes:
            - ./data/pgadmin:/var/lib/pgadmin
        depends_on:
            - db

    frontend:
        build:
            context: frontend
            dockerfile: dockerfile
        container_name: frontend
        env_file: .env
        command: "npm start"
        restart: no
        ports:
            - "${WEB_PORT}:4200"
        networks:
            - ensys
        depends_on:
            - db

    backend:
        build:
            context: ./backend
            dockerfile: docker/dockerfile
            args:
                os_version: ${OS_VERSION}
        container_name: backend
        env_file: .env
        command: sh -c "alembic upgrade head && python -m uvicorn app.main:fastapi_app --host 0.0.0.0 --port 8001"
        ports:
            - '${API_PORT}:8001'
        restart: no
        volumes:
            - ${HOST_DATADIR}:${LOCAL_DATADIR}
            - ${GUROBI_LICENSE_FILE_PATH}:/backend/gurobi.lic
        depends_on:
            - db
            - redis
        networks:
            - ensys

    redis:
        image: redis:alpine
        container_name: redis
        restart: always
        env_file: .env
        command: ["redis-server", "--bind", "redis", "--port", "${REDIS_PORT}"]
        networks:
            - ensys
        volumes:
            - cache:/data

    #TODO: celery setup
    celery:
        build:
            context: ./backend
            dockerfile: docker/dockerfile
            args:
                os_version: ${OS_VERSION}
        container_name: celery
        env_file: .env
        command: celery -A app.celery.celery_app worker --concurrency=1 --loglevel=DEBUG
        volumes:
            - .:/code
        networks:
            - ensys
        depends_on:
            - redis

    #TODO: flower setup
    flower:
        build:
            context: ./backend
            dockerfile: docker/dockerfile
            args:
                os_version: ${OS_VERSION}
        container_name: flower
        env_file: .env
        command: celery -A app.celery.celery_app flower --port=5555
        ports:
            - "${FLOWER_PORT}:5555"
        networks:
            - ensys
        depends_on:
            - redis


#  proxy:
#    build: ./proxy
#    container_name: gui_proxy
#    restart: always
#    ports:
#        - ${PROXY_PORT}:80
#    depends_on:
#        - web
#    volumes:
#        - static_volume:/static
#    networks:
#        - backend
#        - frontend

networks:
    ensys:

volumes:
    static_volume:
        driver: local
    node_modules:
        driver: local
    cache:
        driver: local
